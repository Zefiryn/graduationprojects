<?php

class Application_Model_DbTable_Applications extends Zefir_Application_Model_DbTable
{

	/**
	 * Name of the table without prefix
	 * @var string
	 */
    protected $_raw_name = 'applications';
    
     /**
     * Name of the table generated by the constructor
     * @var string
     */
    protected $_name = '';
    
    /**
	 * Primary key of the table
	 * @var string
	 */
    protected $_primary = 'application_id';


    /**
     * An array of child tables information
     * @var array
     */
    protected $_referenceMap = array(
		'Editions' => array(
    		'objProperty' => '_edition',
			'columns' => array('edition_id'),
			'refTableClass' => 'Application_Model_DbTable_Editions',
			'refColumns' => array('edition_id'),
			'onDelete' => self::CASCADE,
			'onUpdate' => self::RESTRICT
		),
		'Users' => array(
    		'objProperty' => '_user',
			'columns' => array('user_id'),
			'refTableClass' => 'Application_Model_DbTable_Users',
			'refColumns' => array('user_id'),
			'onDelete' => self::CASCADE,
			'onUpdate' => self::RESTRICT
		),
		'Schools' => array(
    		'objProperty' => '_school',
			'columns' => array('school_id'),
			'refTableClass' => 'Application_Model_DbTable_Schools',
			'refColumns' => array('school_id'),
			'onDelete' => self::CASCADE,
			'onUpdate' => self::RESTRICT
		),
		'Degrees' => array(
    		'objProperty' => '_degree',
			'columns' => array('degree_id'),
			'refTableClass' => 'Application_Model_DbTable_Degrees',
			'refColumns' => array('degree_id'),
			'onDelete' => self::CASCADE,
			'onUpdate' => self::RESTRICT
		),
		'WorkTypes' => array(
    		'objProperty' => '_work_type',
			'columns' => array('work_type_id'),
			'refTableClass' => 'Application_Model_DbTable_WorkTypes',
			'refColumns' => array('work_type_id'),
			'onDelete' => self::CASCADE,
			'onUpdate' => self::RESTRICT
		)
	);
	
	/**
	 * An array of parent table information
	 * @var array
	 */
	protected $_dependentTables = array(
		'_files' => 'Application_Model_DbTable_Files',
	);
	
	/**
	 * constructor
	 * @access public
	 * @param array $config
	 * @return void
	 */
    public function __construct($config = array())
    {
      parent::__construct(array());
    }
    
	/**
     * Save or update application data in the database 
     * 
     * @param Application_Model_Applications $application
     * @throws Zend_Exception
     * @return Application_Model_Applications $application
     */
    public function save(Application_Model_Applications $application)
    {
    	if ($application->_application_id != null)
    		$oldData = new Application_Model_Applications($application->_application_id);
    	else 
    		$oldData = null;
    		
    	//add new school if any was given
    	$application = $this->_addNewSchool($application);
    	
    	$user = new Application_Model_Users();
    	$user->getUser($application->_user);
    	
    	//copy miniature
    	$this->_copyMiniature($user, $application, $oldData);
    	
    	//save application data
    	try {
    		parent::save($application);
    			
    	} catch (Zend_Exception $e) {
    		
    		if ($oldData != null)
    		{//delete data only after failing add new application
    			 
	    		//delete new user
	    		$user->delete();
	    		
	    		//delete miniature
				$miniature = APPLICATION_PATH.'/../public'.$options['upload']['miniatures'].'/'.$application->_miniature;
				unlink($miniature);
    		}
    		throw $e;
    	}
    	
    	//create user directory
    	$userDir = $this->_getUserDir($application, $user, $oldData);
    	
   		//copy uploaded files
   		$this->_saveUserFiles($application, $user, $userDir, $oldData);
   		
   		//$application->_files = $files;

    	return $application;
    	
    }
    
    public function delete(Application_Model_Applications $application)
    {
		$options = Zend_Registry::get('options');
    	
    	//remove files
    	$this->_deleteApplicationFiles($application->_files);
    	
    	//remove miniature
    	$path = APPLICATION_PATH.'/../public'.$options['upload']['miniatures'].'/'.$application->_miniature;
    	unlink($path);
    	
    	//remove user
    	$application->_user->delete();
    	
    	//remove application
    	parent::delete($application);
    }
    
    protected function _addNewSchool($application)
    {
    	if (!is_int($application->_school))
    	{
    		$school = new Application_Model_Schools();
    		$school->getSchoolByName($application->_school);
    		if ($school->_school_id == NULL)
    		{
	    		$school->_school_name = $application->_school;
    			$school->save();
    			if ($school->_school_id == null)
    				throw new Zend_Exception('Couldn\'t add new school');
    		}
   			$application->_school = $school->_school_id;
    	}
    	
    	return $application;
    }
    
    protected function _copyMiniature($user, $application, $oldData)
    {
    	$copy = TRUE;
    	
    	$cachedMiniature = strstr($application->_miniature, '/') ? 
    		substr($application->_miniature, strpos($application->_miniature, '/') + 1) :
    		$application->_miniature;

    	if ($oldData != null)
    	{
    		//no new miniature has been sent
    		if ($oldData->_miniature == $cachedMiniature)
    			$copy = FALSE;
    	}
    	
    	if ($copy)
    	{
	    	$options = Zend_Registry::get('options');
	    	$extension = Zefir_Filter::getExtension($application->_miniature);
			$dirName = APPLICATION_PATH.'/../public'.$options['upload']['miniatures'].'/';
	    	
	    	if ($oldData == null)
	    	{//get new name only if new application is being processed
	    		$fileName = $user->getUserUrlName().'.'.$extension;
	    		$fileName = $this->_getNewName($dirName , $fileName);
	    	}
	    	else
	    		$fileName = $oldData->_miniature;
	    	$dir = substr($options['upload']['miniatures'], -1) == '/' ? $options['upload']['miniatures'] : $options['upload']['miniatures'].'/';
	    	
	    	
	    	if ($this->_copy($cachedMiniature, $dir.$fileName))
	    	{
	    		$application->_miniature = $fileName;
	    	}
	    	else
	    	{
	    		if ($oldData != null)
	    		{//delete data only after failing add new application
	    			$user->delete();
	    			throw new Zend_Exception('Couldn\'t save miniature file');
	    		}
	    	}
    	}
    	else
    	{
    		$application->_miniature = substr($application->_miniature, strpos($application->_miniature, '/') + 1); 
    	}
    	
    	return $application;
    }
    
    protected function _getUserDir($application, $user, $oldData)
    {
    	$id = $application->_application_id;
    	$options = Zend_Registry::get('options');
    	
    	//create folder for user's files
    	$uploadDir = APPLICATION_PATH.'/../public'.$options['upload']['applications'].'/';
    	
    	//create edition dir
    	$edition = new Application_Model_Editions($application->_edition);
    	$editionName = str_replace('/', '-', $edition->_edition_name);
    	if (!is_dir($uploadDir.$editionName))
    	{
    		mkdir($uploadDir.$editionName );
   			chmod($uploadDir.$editionName, 0777);
    	}
    	
    	$uploadDir = $uploadDir.$editionName;
    	
    	$type = new Application_Model_WorkTypes();
   		$type->getWorkType($application->_work_type);
   		$userDir = strtoupper($application->_country).'_'.$type->_work_type_name.'_'.$user->getUserUrlName().'_'.$id;
   		if (!is_dir($uploadDir.'/'.$userDir) && $oldData == null)
   		{//create new user dir
   			mkdir($uploadDir.'/'.$userDir);
   			chmod($uploadDir.'/'.$userDir, 0777);
   		}
   		elseif ($oldData != NULL)
   		{//rename old dir if necessary
   			$oldDir = $this->_getOldUserDir($oldData);
	   		
	   		if ($userDir != $oldDir)
	   		{
	   			$this->_renameOldUserDir($oldDir, $userDir, $editionName);
	   		}
   		}
   		
   		return $editionName.'/'.$userDir;
    }
    
    protected function _getOldUserDir($application)
    {
    	$file_path = $application->_files[0]->_path;
    	$strippedEdition = substr($file_path, strpos($file_path, '/')+1);
    	$dir = substr($strippedEdition, 0, strpos($strippedEdition, '/'));
    	return $dir;
    }
    
    protected function _renameOldUserDir($oldDir, $newDir, $edition)
    {
    	$options = Zend_Registry::get('options');
    	$dirPath = APPLICATION_PATH.'/../public'.$options['upload']['applications'].'/'.$edition.'/';

    	rename($dirPath.$oldDir, $dirPath.$newDir);
    }
    
    protected function _saveUserFiles($application, $user, $userDir, $oldData)
    {
    	$options = Zend_Registry::get('options');
    	$files = array();
   		
    	foreach($application->_files as $key => $uploaded_file)
   		{
   			if (strstr($uploaded_file['file'], 'cache'))
   			{
   				$uploaded_file['file'] = substr($uploaded_file['file'], strpos($uploaded_file['file'], '/') + 1);
   				$fileName = 'file_'.$key.'.'.Zefir_Filter::getExtension($uploaded_file['file']);
   				if ($this->_copy($uploaded_file['file'], $options['upload']['applications'].'/'.$userDir.'/'.$fileName))
   				{
   					if ($uploaded_file['file_id'] != null)
   						$file = new Application_Model_Files($uploaded_file['file_id']);
   					else
   						$file = new Application_Model_Files();
   					$file->_path = $userDir.'/'.$fileName;
   					$file->_file_desc = $uploaded_file['description'];
   					$file->_application = $application->_application_id;
   					$file->save();
   					$files[] = $file;
   				}
	   			else
	   			{
	   				if ($oldData == null)
	   				{
		   				//delete new user
		   				$user->delete();
		   				
		   				//delete files and user directory
		   				$this->_deleteApplicationFiles($files);
		   				$uploadDir = APPLICATION_PATH.'/..public/'.$options['upload']['applications'].'/';
		   				unlink($uploadDir.$userDir);
		   				
		   				//delete miniature
		   				$miniature = APPLICATION_PATH.'/../public'.$options['upload']['miniatures'].'/'.$application->_miniature;
		   				unlink($miniature);
		   				
		   				//delete application entry
		   				$application->delete();
	   				}
	   				//throw error
	   				throw new Zend_Exception('Couldn\'t copy pictures');
	   			}
   				
   			}
   			else 
   			{//update path if necessary
   				if (!strstr($uploaded_file['file'], $userDir))
   				{
   					$file = new Application_Model_Files($uploaded_file['file_id']);
   					$path = substr($file->_path, 0, strrpos($file->_path, '/'));
   					
   					$file->_path = str_replace($path, $userDir, $file->_path);
   					$file->update();
   					$files[] = $file;
   				}
   			}
   			
   		}
    	
   		return $files;
    }
    
    protected function _deleteApplicationFiles($files)
    {
    	$options = Zend_Registry::get('options');
    	foreach($files as $file)
    	{
    		$dir = APPLICATION_PATH.'/../public'.$options['upload']['applications'].'/'.substr($file->_path, 0, strrpos($file->_path, '/'));
    		$path = APPLICATION_PATH.'/../public'.$options['upload']['applications'].'/'.$file->_path;
    		//unlink($path);
    		$file->delete();
    	}
    	
    	//rmdir($dir);
    }
}

